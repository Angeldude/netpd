#N canvas 468 44 464 626 10;
#X obj 9 7 loadbang;
#X obj 282 53 list;
#X obj 282 104 list split 1;
#X obj 282 75 t a a;
#X msg 363 104 \$1;
#X obj 282 129 list prepend OSC;
#X obj 282 149 list trim;
#X obj 9 103 netpd-find-sync /\$1/\$2;
#X obj 282 200 netpd-r /\$1/\$2;
#X obj 282 169 netpd-s /\$1/\$2;
#X msg 9 127 \$1 /dump/request;
#X obj 9 193 routeOSC /dump/request;
#X obj 55 419 s \$1.NETPD;
#X obj 9 215 b;
#X obj 55 443 r \$1.NETPD;
#X obj 36 283 t b b a;
#X msg 36 306 b;
#X obj 75 331 s \$0.to;
#X obj 155 558 r \$0.to;
#X obj 283 9 r \$1.send;
#X obj 282 225 s \$1.receive;
#X obj 363 243 s \$1.sender;
#X obj 89 238 r \$1.sender;
#X obj 55 607 s \$1.send;
#X msg 9 581 \$1 /dump/finished;
#X obj 128 22 r \$1.receive;
#X obj 128 44 routeOSC /dump/finished;
#X msg 128 67 ready;
#X obj 174 96 b;
#X msg 55 356 1 \, 2 \, 3 \, 4 \, 5 \, 6 \, 7 \, 8 \, 9 \, 10;
#X obj 55 559 list prepend b;
#X obj 297 343 netpd-status-get socket 1;
#X obj 282 367 !=;
#X obj 282 389 s \$1.notown;
#X obj 363 221 t a a;
#X obj 9 149 s \$1.send;
#X obj 9 171 r \$1.receive;
#X obj 282 277 route symbol;
#X msg 282 299 -1;
#X obj 177 227 loadbang;
#X obj 177 249 del 0;
#X msg 167 292 l;
#X msg 36 74 unready;
#X obj 9 29 t b b;
#N canvas 886 44 428 409 unpatch.state 0;
#X obj 41 175 s UNPATCH;
#X msg 41 152 state isready;
#X obj 41 197 r UNPATCH;
#X obj 41 219 route state;
#X obj 14 375 outlet;
#X obj 14 109 inlet;
#X obj 14 131 t b b;
#X msg 41 265 1;
#X obj 14 316 sel 0;
#X obj 14 294 f;
#X msg 14 349 find;
#X text 12 8 We want patches to sync only when unpatch finished loading
the patches \, so we can be sure that all abstractions are loaded.
This is necessary for cases where dynamically loaded abstractions are
part of the state.;
#X obj 41 244 route notready synced ready;
#X msg 147 337 ready;
#X connect 1 0 0 0;
#X connect 2 0 3 0;
#X connect 3 0 12 0;
#X connect 5 0 6 0;
#X connect 6 0 9 0;
#X connect 6 1 1 0;
#X connect 7 0 9 1;
#X connect 8 0 10 0;
#X connect 9 0 8 0;
#X connect 10 0 4 0;
#X connect 12 0 7 0;
#X connect 12 1 10 0;
#X connect 12 2 13 0;
#X connect 13 0 4 0;
#X restore 9 52 pd unpatch.state;
#X obj 55 378 list prepend;
#X obj 55 399 list trim;
#X obj 9 259 t a a b;
#X msg 150 329 dump;
#X obj 167 271 t b b;
#X msg 194 329 init;
#X obj 167 184 r \$1.NETPD;
#X obj 167 206 route reinit;
#X obj 9 237 list append;
#X obj 55 465 route send sendtyped;
#X obj 55 487 t a b;
#X obj 113 487 t a b;
#X msg 82 509 0;
#X msg 140 508 1;
#X msg 105 535 typed \$1;
#X obj 283 31 route typed;
#X msg 357 63 typed \$1;
#X connect 0 0 43 0;
#X connect 1 0 3 0;
#X connect 2 1 5 0;
#X connect 3 0 2 0;
#X connect 3 1 4 0;
#X connect 4 0 9 1;
#X connect 5 0 6 0;
#X connect 6 0 9 0;
#X connect 7 0 10 0;
#X connect 7 1 28 0;
#X connect 8 0 20 0;
#X connect 8 1 34 0;
#X connect 10 0 35 0;
#X connect 11 0 13 0;
#X connect 13 0 53 0;
#X connect 14 0 54 0;
#X connect 15 0 16 0;
#X connect 15 1 29 0;
#X connect 15 2 17 0;
#X connect 16 0 17 0;
#X connect 18 0 30 1;
#X connect 19 0 60 0;
#X connect 22 0 53 1;
#X connect 24 0 23 0;
#X connect 25 0 26 0;
#X connect 26 0 27 0;
#X connect 27 0 7 0;
#X connect 28 0 27 0;
#X connect 29 0 45 0;
#X connect 30 0 23 0;
#X connect 31 0 32 1;
#X connect 32 0 33 0;
#X connect 34 0 21 0;
#X connect 34 1 37 0;
#X connect 36 0 11 0;
#X connect 37 0 38 0;
#X connect 37 1 32 0;
#X connect 38 0 32 0;
#X connect 39 0 40 0;
#X connect 40 0 49 0;
#X connect 41 0 15 0;
#X connect 42 0 7 0;
#X connect 43 0 44 0;
#X connect 43 1 42 0;
#X connect 44 0 7 0;
#X connect 45 0 46 0;
#X connect 46 0 12 0;
#X connect 47 0 24 0;
#X connect 47 1 15 0;
#X connect 47 2 48 0;
#X connect 48 0 45 1;
#X connect 49 0 41 0;
#X connect 49 1 50 0;
#X connect 50 0 45 1;
#X connect 51 0 52 0;
#X connect 52 0 49 0;
#X connect 53 0 47 0;
#X connect 54 0 55 0;
#X connect 54 1 56 0;
#X connect 55 0 30 0;
#X connect 55 1 57 0;
#X connect 56 0 30 0;
#X connect 56 1 58 0;
#X connect 57 0 59 0;
#X connect 58 0 59 0;
#X connect 59 0 23 0;
#X connect 60 0 61 0;
#X connect 60 1 1 0;
#X connect 61 0 9 0;
